version: '3.6'
services:
  postgres:
    image: postgres:13
    restart: always
    environment: 
        - DATABASE_HOST=${DATABASE_HOST}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB} 
    ports: 
        - "5432:5432"
    volumes: 
        - postgres_data:/var/lib/postgresql/data 
        - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
  keycloak:
    image: quay.io/keycloak/keycloak:15.0.2
    ports:
      - 8080:8080
    restart: always
    command:
      - '-Dkeycloak.profile.feature.upload_scripts=enabled'
      - '-Dkeycloak.migration.action=import'
      - '-Dkeycloak.migration.provider=singleFile'
      - '-Dkeycloak.migration.file=/tmp/master-realm.json'
      - '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING'
    volumes:
      - type: bind
        source: './keycloak/master-realm.json'
        target: '/tmp/master-realm.json'
    environment:
      PROXY_ADDRESS_FORWARDING: ${PROXY_ADDRESS_FORWARDING}
      DB_VENDOR: ${DB_VENDOR}
      DB_ADDR: ${DB_ADDR}
      DB_DATABASE: ${DB_DATABASE}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
  hasura:
    image: 'hasura/graphql-engine:v2.1.1'
    ports:
      - '8079:8080'
    depends_on:
      - keycloak
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
  sf-node:
    image: 'sugarfunge.azurecr.io/node:latest'
    restart: always
    network_mode: 'host'
    command: ["--dev", "--pruning", "archive", "--tmp", "--ws-external", "--rpc-external", "--rpc-cors", "all"]
  sf-status:
    image: 'sugarfunge.azurecr.io/status:latest'
    restart: always
    network_mode: 'host'
    environment:
        PORT: ${PORT}
        REACT_APP_PROVIDER_SOCKET: ${REACT_APP_PROVIDER_SOCKET}
  sf-explorer:
    image: 'sugarfunge.azurecr.io/explorer:latest'
    restart: always
    network_mode: 'host'
    environment:
      WS_URL: ${WS_URL}
  ipfs:
    image: ipfs/go-ipfs:master-2021-11-17-0c2f9d5
    restart: always
    ports:
      - "4001:4001"
      - "8001:8080"
      - "5001:5001"
    volumes:
      - ./ipfs:/data/ipfs
  sf-api:
    image: 'sugarfunge.azurecr.io/api:latest'
    restart: always
    network_mode: 'host'
    command: ["-l", "http://0.0.0.0:4000", "-s", "ws://127.0.0.1:9944"]
volumes:
  postgres_data:
